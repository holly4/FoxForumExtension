
/*
    let logging = false;

    function showTable(state) {
        let $firstRow = $("#logging tr:first-child");
        let $otherRows = $("#logging tr:not(:first-child)")

        if (state) {
            $firstRow.find('img').attr('src', closeIcon);
            $otherRows.show();
        } else {
            $firstRow.find('img').attr('src', openIcon);
            $otherRows.hide();
        }
    }

    function addHeader($container, text, state, set_state) {
        let $div = $('<div>')
            .appendTo($container);

        $('<img>')
            .appendTo($div)
            .attr('src', state ? checkedBox : checkBox)
            .css('height', iconSize)
            .css('width', iconSize)
            .click(function () {
                state = !state;
                set_state(state);
                $(this).attr('src', state ? checkedBox : checkBox);
                if (state) {
                    $container.find('table').show();
                } else {
                    $container.find('table').hide();
                }
            });

        $('<span>')
            .appendTo($div)
            .css('margin-left', '.5em')            
            .text(text);
    }

    function addTable(title, set_state) {
        let state = false;

        let $container = $('<div>')
            .appendTo($('#ffh-div'))
            .addClass('site')
            .css('padding-bottom', '10px');

        addHeader($container, title, logging, set_state);

        let $table = $('<table>')
            .appendTo($container)
            .attr('id', 'logging')
            .css('font-size', 'smaller');

        let $tr = $('<tr>')
            .appendTo($table);

        $('<img>')
            .attr('src', state ? closeIcon : openIcon)
            .css('height', iconSize)
            .css('width', iconSize)
            .css('margin-right', '1em')
            .click(function () {
                state = !state;
                showTable(state);
            }).appendTo($tr);

        $tr = $('<tr>')
            .appendTo($table);
    }

    function addRow(key, state, setState) {
        let $tr = $("<tr>")
            .appendTo($('#logging'));

        let $td = $('<td>')
            .appendTo($tr)
        $('<button>')
        $('<img>')
            .appendTo($td)
            .addClass('icon')
            .attr('src', state ? checkedBox : checkBox)
            .css('height', iconSize)
            .css('width', iconSize)
            .click(function () {
                state = !state;
                $(this).attr('src', state ? checkedBox : checkBox)
                setState(key, state);
            });
        $('<td>')
            .appendTo($tr)
            .text(key)
    }

    let loggingStates = {};

    function createTable() {
        let loggers = ["AvatarSwapper", "CleanComments", "CommentObserver", "FilterUsers()"]

        if (settings.loggingStates) {
            loggingStates = settings.loggingStates;
            console.log('logging: ', loggingStates);
        } else {
            logging = false;
            loggingStates = {};
            loggers.forEach((i) => loggingStates[i] = false);
            chrome.storage.local.set({
                loggingStates: loggingStates
            });
            console.log('wrote: ', loggingStates);
        }

        addTable("Logging", function (state) {
            chrome.storage.local.set({
                logging: state
            });
        });

        loggers.forEach(function (i) {
            addRow(i, loggingStates[i], function (key, state) {
                loggingStates[key] = state;
                chrome.storage.local.set({
                    loggingStates: loggingStates
                });
                console.log('wrote: ', loggingStates);
            });
        });

        showTable(false);
    }

    if (settings.logging) {
        logging = settings.logging;
        console.log('logging: ', logging);
    } else {
        logging = false;
        chrome.storage.local.set({
            logging: logging
        });
        console.log('wrote: ', logging);
    }
    */
